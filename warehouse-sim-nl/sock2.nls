
;==============================================
; an .nls file to improve the interface to
; sock2 & make it easier to adapt
;==============================================


extensions [ sock2 ]


globals [socket-debug-out]
; socket-debug-out is (task print) by default
; if you want output to go somewhere else change this after connecting
; eg: set socket-debug-out (task print-output)



to connect-to-localhost [#port]
  set socket-debug-out (task [print ?])      
  (run socket-debug-out (word "connecting on " #port))
  sock2:connect-local #port
  (run socket-debug-out "socket connected")
end



to socket-repl
  let #cmd-str sock2:read
 ; (run socket-debug-out (word "received: " #cmd-str))
  run #cmd-str
  tick
end



to flush-io
  let #cmd-str sock2:read
  (run socket-debug-out (word "received: " #cmd-str))
  if (#cmd-str = "stop") [stop]
  tick
end



to socket-write [#str]
  (run socket-debug-out (word "writing: " #str))
  sock2:write #str
end



to connect-clojure
  sock2:connect-local port-number
end

to read
  let text sock2:read
  show (text)
end

to send [message]
   sock2:write (word message)
end


;Not optimized! this has a huge body.
to send-world-state  
let world-state "["; "#{"

;ask forklifts[set world-state (word world-state"(isa forklift " self")")]
ask bays[ 
let #bay self
  ifelse loading-bay = true 
     [set world-state (word world-state "(isa loading-bay "self")")]
     [set world-state (word world-state "(isa bay "self")")] ;self should be (shelf x), bracketed
  ask shelves-here[
     set world-state (word world-state "(on "at-bay" "self")") ;self should be (shelf x), bracketed
     set world-state (word world-state "(is-height "#height" "self")") ;self should be (shelf x), bracketed
  ] 
]
  set world-state (word world-state "]")
  send world-state
end

to send-dynamic-state
 let dyn (word "[") ;"#{") 

   ask patches[ 
      ask turtles-here[
         if is-collectable? self[
           set dyn (word dyn "(holds "[at-bay] of parent" ("item-type" "who"))")
           set dyn (word dyn "(holds "parent" ("item-type" "who"))")
         ]  
         if is-forklift? self[
           set dyn (word dyn"(adjacent (start loc)" self")")
           set dyn (word dyn" (holds "self" none)")
    ;       set dyn (word dyn"(is-height "#height " " self")")
         ]
]]
     
   set dyn (word dyn "]")
   send dyn

end