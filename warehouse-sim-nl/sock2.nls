to connect-clojure
  sock2:connect-local port-number
end

to read
  let text sock2:read
  show (text)
end

to send [message]
    sock2:write (word message)
end


;Not optimized! this has a huge body.
to send-world-state
let world-state ""
ask patches with [pxcor mod 2 = 0][
  let originalpx pxcor 
  let originalpy pycor
  
  if (is-multiple-of pxcor 2)[
    ask patch (pxcor + 1) pycor[          
      set world-state (word world-state "(connects ("originalpx" "originalpy") ("pxcor" "pycor"))")]
    ask patch (pxcor - 1) pycor[          
      set world-state (word world-state "(connects ("originalpx" "originalpy") ("pxcor" "pycor"))")]
  ]
  if (is-multiple-of pycor 2)[
    ask patch pxcor (pycor + 1)[          
      set world-state (word world-state "(connects ("originalpx" "originalpy") ("pxcor" "pycor"))")]
    ask patch pxcor (pycor - 1)[          
      set world-state (word world-state "(connects ("originalpx" "originalpy") ("pxcor" "pycor"))")]
  ]

]
  send world-state


end
to send-dynamic-state
  let dynamic-state "" 

  ask patches[
    ifelse (count turtles-here = 0)[
      set dynamic-state (word dynamic-state "(at ("pxcor " " pycor ") none)")
    ][
    
    if (count turtles-here != 0)[
      ask turtles-here[
         if is-collectable? self[
           set dynamic-state (word dynamic-state "(at ("pxcor " " pycor ")" item-type" "who")")
         ]  
         if is-forklift? self[
           set dynamic-state (word dynamic-state "(at ("pxcor " " pycor ")" self")")  
           set dynamic-state (word dynamic-state "(isa forklift " self")")]]]]]
   send dynamic-state
end
