to begin-init
  ask patches [ 
    set pcolor gray - 1
    if is-multiple-of pxcor 4 and 
       not is-edge-patch self 
       [sprout-bays 1]
  ]
  spawn-shelves
  spawn-objects
  set-shapes
  set-colors
  set-up-loading-area 2
  connect-clojure
end


to spawn-shelves
  ask bays [  
     let i 0
     hatch-shelves 5[
       set at-bay myself
         set #height i
         set i i + 1
       ]]
end

to spawn-objects
  let i 0
  ask shelves[
    let #shelf self
      hatch-collectables random max-shelf-capacity [
        set #height i
        set i i + 1
        set item-type one-of all-collectables
      ;  set at-shelf #shelf
        set parent #shelf
      ]
    
  ]
end

to set-up-loading-area [#size]
  ask patches [
     if pxcor < #size and pycor < #size[set pcolor green]  
  ]
end

;Try and make this dynamic enough to not 
to spawn-forklift
  let px 6
  loop[
    ifelse not any? turtles-on patch px 0[
        ask patch px 0 [
           sprout-forklifts 1 [set shape "car"];arbritrary value, that is unlikely
        ]                      ;to be set throughout the program 
                           ;as the destination
      stop
    ]
    [set px px + 1]
  ]
end

;Sets up the shapes of the objects - this has to be done after the objects have been created.
to set-shapes
  ask bays [set shape "square 2"]
  ask collectables [set shape "square"]
 ; ask folklifts [set shape "car"]
end

to set-colors
  ask bays [set color 22 ask patch-here [set pcolor 21]]
  ask shelves []
  ask collectables [set color one-of [brown]]

   ; hide this at a later date rather than blending in?
  ;ask all-collectables [set color orange - 1]
end